runOncePath("lib_dd_orbit").

    local source is ship.
    local dest is Mun.

    local rA is source:obt:semiMajorAxis.
    local rB is dest:obt:semiMajorAxis.
    local aTX is (rA + rB) / 2.
    local tTX is constant:pi * sqrt(aTX^3 / source:obt:body:mu).

    local lower is 300.
    local upper is 300 + 1 / abs(1 / source:obt:period - 1 / dest:obt:period).
    local t is 0.
    local obtA0 is DDOrbit["withOrbit"](source:obt).
    local obtB0 is DDOrbit["withOrbit"](dest:obt).
    local obtA is false.
    local obtB is false.
    local posA is false.
    local posB is false.

    until false {
        //print "lower: " + lower + " upper: " + upper.
        set t to (lower + upper) / 2.

        set obtA to obtA0["after"](obtA0, t).
        //print "0: " + obtA0["trueAnomaly"] + " t: " + obtA["trueAnomaly"].
        set posA to obtA["position"](obtA).
        local xyA is posA:vec.
        set xyA:y to 0.

        set obtB to obtB0["after"](obtB0, t + tTX).
        set posB to obtB["position"](obtB).
        local xyB is posB:vec.
        set xyB:y to 0.

        // local curPhase is vang(xyA, xyB).
        local curPhase is norDeg(obtA["trueAnomaly"] + obtA["argumentOfPeriapsis"] + obtA["longitudeOfAscendingNode"] - obtB["trueAnomaly"] - obtB["argumentOfPeriapsis"] - obtB["longitudeOfAscendingNode"]).

        //print "xyA: " + xyA + " xyB: " + xyB.
        print "t: " + round(t) + " phase: " + round(curPhase) + " vAng: " + round(vang(xyA, xyB)).
        if curPhase > 175.1 { set upper to t. }
        else if curPhase < 174.9 { set lower to t. }
        else { break. }
        wait 0.001.
    }
if false {
    print " ".
    print "obtA: " + obtA["trueAnomaly"].
    print "obtB: " + obtB["trueAnomaly"].
    print " ".
    print "posA: " + posA.
    print "posB: " + posB.
    print " ".
}
    local body is source:obt:body.
    local origin is posA.
    local destination is posB.
    local duration is tTX.

        local r1 is origin:mag.
        local r2 is destination:mag. // / r1.
        //set r1 to 1.
        local v is vang(origin, destination).
        local cosv is cos(v).
        local sinv is sin(v).

        print "r1: " + r1 + " r2: " + r2 + " v: " + v.

        // Evaluate the constants l k, and m from r1, r2 and v using equations
        // (5.9) through (5.11)
        // (5.9)
        local k is r1 * r2 * (1 - cosv).
        // (5.10)
        local l is r1 + r2.
        // (5.11)
        local m is r1 * r2 * (1 + cosv).
        
        print "k: " + k.
        print "l: " + l.
        print "m: " + m.

        // Determine the limits on the possible values of p by evaluating pi and
        // pii from equations (5.18) and (5.19).
        // Pick a trial value of p within the appropriate limits.
        local p0 is 0.
        local p1 is 0.

            // (5.18)
            local pi is k / (l + sqrt(2 * m)).
            // (5.19)
            local pii is k / (l - sqrt(2 * m)).
            print "pi: " + pi.
            print "pii: " + pii.

        if v < 180 {
            set p1 to (pi + pii) / 2.
            set p0 to p1 * 1.05.
        } else {
            set p0 to pii * 1.05.
            set p1 to p0 * 1.05.
        }

        print "p0: " + p0.
        print "p1: " + p1.

        // Using the trial value of p, solve for a from equation (5.12). The
        // type conic orbit will be known from the value of a.
        function eval {
            parameter p.
            // (5.12)
            local a1 is m * k * p.
            local a2 is (2 * m - l^2) * p^2 + 2 * k * l * p - k^2.
            print "a21: " + (2 * m - l^2) * p^2.
            print "a22: " + 2 * k * l * p.
            print "a23: " + k^2.
            print "a2:  " + a2.
            local a is a1 / a2.
            //print 1 / 0.

            // Solve for f and g from equations (5.5), (5.6) and (5.7)
            // (5.5)
            local f_ is 1 - r2 / p * (1 - cosv).
            // (5.6)
            local g_ is r1 * r2 * sinv / sqrt(body:mu * p).

            local t is 0.
            // Solve for E or F, as appropriate, using equations (5.13) and
            // (5.14) or equation (5.15)
            // Solve for t from equation (5.16) or (5.17)
            if a > 0 {
                // (5.13)
                local dE is arccos(1 - r1 * (1 - f_) / a).
                // (5.16)
                set t to g_ + sqrt(a ^ 3 / body:mu) * (dE * constant:degToRad - sin(dE)).
            } else {
                // (5.15)
                local dF is arccosh(1 - r1 / a * (1 - f_)).
                // (5.17)
                set t to g_ + sqrt(-a ^ 3 / body:mu) * (sinh(dF) - dF * constant:degToRad).
            }

            return lex("p", p, "a", a, "t", t).
        }

        print "p0: " + p0 + " p1: " + p1.
        local pat is eval(p1).
        local pat0 is eval(p0).
        // compare t with the desired time-of-flight.
        until abs(duration - pat["t"]) < 60 {
            print "duration: " + duration + " t: " + pat["t"].
            // Adjust the trial value of p using one of the iteration methods
            // discussed above until the desired time-of-flight is obtained.
            print "pat: " + pat.
            print "pat0: " + pat0.
            local p is pat["p"] + (duration - pat["t"]) * (pat["p"] - pat0["p"]) / (pat["t"] - pat0["t"]).
            set pat0 to pat.
            set pat to eval(p).
            wait 0.
        }

        local self is lex(
            "body", body,
            "origin", origin:vec,
            "destination", destination:vec,
            "trueAnomaly", v,
            "parameter", pat["p"],
            "semiMajorAxis", pat["a"],
            "time", pat["t"]
        ).
        print self.
        print self["time"] / 6 / 60 / 60.
