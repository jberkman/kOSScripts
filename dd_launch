// launch.ks - Launch into a parking suborbital trajectory.
// Copyright Â© 2015 jacob berkman
// This file is distributed under the terms of the MIT license.

@lazyglobal off.

run once lib_dd.

clearscreen.
print "DunaDirect Launch! v2.9".

// Parse options 
local undefined is "$UNDEFINED$".

parameter arg0key is undefined,
  arg0value is undefined,
  arg1key is undefined,
  arg1value is undefined,
  arg2key is undefined,
  arg2value is undefined,
  arg3key is undefined,
  arg3value is undefined,
  arg4key is undefined,
  arg4value is undefined.

local args is lexicon(arg0key, arg0value, arg1key, arg1value, arg2key, arg2value, arg3key, arg3value, arg4key, arg4value).

local targetInclination is 0.
if args:hasKey("inc") {
  set targetInclination to args["inc"].
}

local launchAzimuth is arcsin(clamp(cos(targetInclination) / cos(ship:latitude), -1, 1)).
if targetInclination < 0 {
  set launchAzimuth to 180 - launchAzimuth.
}
if args:hasKey("azm") {
  set launchAzimuth to args["azm"].
}

local rendezvous is false.
if args:hasKey("rdv") {
  set rendezvous to args["rdv"].
}

local launchAltitude is body:atm:height + 10000.
if rendezvous {
	set launchAltitude to target:orbit:semiMajorAxis - body:radius.
}
if args:hasKey("alt") {
  set launchAltitude to args["alt"] * 1000.  
}

local pitchRate is 2 / 3.
if args:hasKey("pit") {
  set pitchRate to args["pit"].
}

print " ".
print "Launch Configuration:".
print "Rendezvous (rdv): " + rendezvous.
print "Altitude (alt): " + round(launchAltitude / 1000, 3) + " km".
if body:atm:exists {
  print "Pitch Rate (pit): " + round(pitchRate, 3) + " deg/s".
}
if not args:hasKey("azm") {
  print "Inclination (inc): " + round(targetInclination, 3) + " deg".
}
print "Azimuth (azm): " + round(launchAzimuth, 3) + " deg".
if not body:atm:exists {
  print " ".
}
if args:hasKey("azm") {
  print " ".
}
print " ".
print " ".
logLaunchEvent(list(launchAzimuth, pitchRate)).

// Initialize and begin countdown.
set ship:control:pilotMainThrottle to 0.
sas on.
setMET(time:seconds).

if body:atm:exists {
  run lib_dd_launch(launchAltitude, launchAzimuth, pitchRate).
} else {
  // Wait to clear tower.
  local rollAlt is alt:radar + 60.
  lock throttle to 1.
  wait until alt:radar > rollAlt.
  sas off.
  triggerEvent("lchRoll").
  // Pitch program.
  local tPitch is time:seconds.

  function launchPitch {
    if apoapsis < altitude + 1000 - alt:radar {
      return 67.5.
    }
    return 22.5.    
  }

  local lock lookAt to heading(launchAzimuth, launchPitch()).
  local lock lookUp to heading(launchAzimuth, -45).
  lock steering to lookDirUp(lookAt:vector, lookUp:vector).
  wait until apoapsis > launchAltitude.
  triggerEvent("lchMECO").
}

lock throttle to 0.
logLaunchEvent(list(obt:inclination)).

// Circularize etc.
function orbitalVelocity {
  parameter orbitable.
  parameter altitude.
  parameter a is orbitable:obt:semiMajorAxis.
  local r is altitude + orbitable:body:radius.
  return sqrt(orbitable:body:mu * ((2 / r) - (1 / a))).  
}

if rendezvous {
  run dd_rendezvous.
} else {
  local goalSemiMajorAxis is body:radius + apoapsis.
  local initialVelocity is orbitalVelocity(ship, apoapsis).
  local goalVelocity is orbitalVelocity(ship, apoapsis, goalSemiMajorAxis).
  local deltaV is goalVelocity - initialVelocity.

  local burnTime is deltaVBurnTime(deltaV).
  lock burnStartTime to time:seconds + eta:apoapsis - burnTime / 2.

  mprint("Circularization burn time: " + round(burnTime) + " dV:" + round(deltaV)).
  logLaunchEvent(list(deltaV)).

  wait until time:seconds >= burnStartTime - 30.
  set warp to 0.
  lock burnPitch to -pitchForVec(ship, ship:prograde:forevector).
  lock burnHeading to compassForVec(ship, ship:prograde:forevector).
  lock steering to lookdirup(heading(burnHeading, burnPitch):vector, heading(burnHeading, -45):vector).

  wait until time:seconds >= burnStartTime.
  steerToDir().
  lock throttle to 1.

  wait until obt:semiMajorAxis >= goalSemiMajorAxis.

  lock throttle to 0.
  unlock steering.
  unlock throttle.
  set ship:control:pilotMainThrottle to 0.
}
logLaunchEvent(list(stageDeltaV())).
triggerEvent("lchOrbital").
