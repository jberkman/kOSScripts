// ddSuicideBurn.ks - Perform descent burn.
// Copyright Â© 2015 jacob berkman
// This file is distributed under the terms of the MIT license.

@lazyglobal off.

clearscreen.
print "DunaDirect Suicide! v1.0".

run once lib_dd_10k.

function timeToImpact {
  // s = ut + 1/2 * at^2
  // s = a / 2 * t ^ 2 + u * t
  // a/2 * t^2 + u*t - s = 0

  // a = g/2
  local a is body:mu / (2 * body:radius ^ 2).

  // b = u
  local b is -verticalSpeed.

  // c = -s
  local c is -alt:radar.

  return (-b + sqrt(b ^ 2 - 4 * a * c)) / (2 * a).
}

function suicideVelocityWithTime {
  parameter t.
  local a is body:mu / body:radius ^ 2.
  local ret is -verticalSpeed + a * t.
  return ret.
}

function suicideBurnDistance {
  local v is suicideVelocityWithTime(timeToImpact()).
  local t is deltaVBurnTime(v).
  local g is ship:availableThrust / ship:mass. // - body:mu / body:radius ^ 2.
  local d is g * t ^ 2 / 2.
  return d.
}

local lock burnHeading to compassForVec(ship, ship:srfretrograde:forevector).
local lock burnPitch to 90 - 2 * vang(up:vector, ship:srfretrograde:vector).
local lock burnUp to heading(90, -45).

lock steering to lookdirup(heading(burnHeading, burnPitch):vector, burnUp:vector).

local burnPID to pidLoop(0.1, 0, 0, 0, 1).

//set burnPID:kP to 0.1.
//set burnPID:kI to 0.1.
//set burnPID:kD to 0.5.
set burnPID:setPoint to -1.
lock throttle to 0.

local lock impactTime to timeToImpact().
local lock suicideDeltaV to suicideVelocityWithTime(impactTime).
local lock landed to status = "LANDED" or status = "SPLASHED".

print "Descending to " + suicideBurnDistance() + "...".
wait until landed or alt:radar - suicideBurnDistance() < 10. // impactTime < ceiling(deltaVBurnTime(suicideDeltaV)).

until landed {
  print "Burning!".
  lock throttle to burnPID:update(time:seconds, verticalSpeed).
  wait until landed or abs(verticalSpeed) < 1.

  lock throttle to 0.
  print "Waiting for burn...".
  wait until landed or impactTime < ceiling(deltaVBurnTime(suicideDeltaV)).
}

unlock steering.
unlock throttle.
sas on.
print "Landing complete.".
